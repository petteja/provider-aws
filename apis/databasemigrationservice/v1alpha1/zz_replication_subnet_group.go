/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ReplicationSubnetGroupParameters defines the desired state of ReplicationSubnetGroup
type ReplicationSubnetGroupParameters struct {
	// Region is which region the ReplicationSubnetGroup will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The description for the subnet group.
	// +kubebuilder:validation:Required
	ReplicationSubnetGroupDescription *string `json:"replicationSubnetGroupDescription"`
	// The name for the replication subnet group. This value is stored as a lowercase
	// string.
	//
	// Constraints: Must contain no more than 255 alphanumeric characters, periods,
	// spaces, underscores, or hyphens. Must not be "default".
	//
	// Example: mySubnetgroup
	// +kubebuilder:validation:Required
	ReplicationSubnetGroupIdentifier *string `json:"replicationSubnetGroupIdentifier"`
	// One or more subnet IDs to be assigned to the subnet group.
	// +kubebuilder:validation:Required
	SubnetIDs []*string `json:"subnetIDs"`
	// One or more tags to be assigned to the subnet group.
	Tags                                   []*Tag `json:"tags,omitempty"`
	CustomReplicationSubnetGroupParameters `json:",inline"`
}

// ReplicationSubnetGroupSpec defines the desired state of ReplicationSubnetGroup
type ReplicationSubnetGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ReplicationSubnetGroupParameters `json:"forProvider"`
}

// ReplicationSubnetGroupObservation defines the observed state of ReplicationSubnetGroup
type ReplicationSubnetGroupObservation struct {
	// The status of the subnet group.
	SubnetGroupStatus *string `json:"subnetGroupStatus,omitempty"`
	// The subnets that are in the subnet group.
	Subnets []*Subnet `json:"subnets,omitempty"`
	// The ID of the VPC.
	VPCID *string `json:"vpcID,omitempty"`
}

// ReplicationSubnetGroupStatus defines the observed state of ReplicationSubnetGroup.
type ReplicationSubnetGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ReplicationSubnetGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationSubnetGroup is the Schema for the ReplicationSubnetGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ReplicationSubnetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReplicationSubnetGroupSpec   `json:"spec"`
	Status            ReplicationSubnetGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationSubnetGroupList contains a list of ReplicationSubnetGroups
type ReplicationSubnetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReplicationSubnetGroup `json:"items"`
}

// Repository type metadata.
var (
	ReplicationSubnetGroupKind             = "ReplicationSubnetGroup"
	ReplicationSubnetGroupGroupKind        = schema.GroupKind{Group: Group, Kind: ReplicationSubnetGroupKind}.String()
	ReplicationSubnetGroupKindAPIVersion   = ReplicationSubnetGroupKind + "." + GroupVersion.String()
	ReplicationSubnetGroupGroupVersionKind = GroupVersion.WithKind(ReplicationSubnetGroupKind)
)

func init() {
	SchemeBuilder.Register(&ReplicationSubnetGroup{}, &ReplicationSubnetGroupList{})
}
